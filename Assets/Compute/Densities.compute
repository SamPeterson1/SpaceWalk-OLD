// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "/Includes/Noise.compute"

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

RWStructuredBuffer<float> densities;
float xOff;
float yOff;
float zOff;

int toIndex(int3 coord) {
    return coord.x * 40 * 40 + coord.y * 40 + coord.z;
}

[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x < 40 && id.y < 40 && id.z < 40) {
        float3 toCenter = id + float3(xOff, yOff, zOff) - float3(20, 20, 20);
        float dist = sqrt(toCenter.x * toCenter.x + toCenter.y * toCenter.y + toCenter.z * toCenter.z) + snoise(toCenter / 10.0f) * 1.5f;
        densities[toIndex(id)] = dist - 1000.0f;
    }
}
